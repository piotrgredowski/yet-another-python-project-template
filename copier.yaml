_jinja_extensions:
  - copier_templates_extensions.TemplateExtensionLoader
  - extensions/context.py:DependenciesUpdater
  - extensions/context.py:AuthorFromGit
  - extensions/context.py:InitGitRepo
_subdirectory: "template_src"
_answers_file: .copier-answers.main.yaml

project_name:
  type: str
  help: What is your project name? Using plain english.
  validator: >-
    {% if not project_name %}
    'project_name' can't be empty
    {% endif %}

project_layout:
  type: str
  choices:
    flat: "flat"
    src: "src"
    one_file: "one_file"
  default: "flat"
  help: "How would you like to layout your project? One file is a single `main.py` file. Reference: https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/"

module_name:
  type: str
  help: What is your Python module name?
  default: "{{ project_name.lower().replace(' ', '_').replace('-', '_') }}"
  validator: >-
    {% if not module_name %}
    'module_name' can't be empty
    {% endif %}
  when: "{{ project_layout == 'flat' }}"

author_name:
  type: str
  help: What is your name? Default is the name from your git config.
  default: "{{ get_author_name_from_git() }}"
  validator: >-
    {% if not author_name %}
    'author_name' can't be empty
    {% endif %}

author_email:
  type: str
  help: What is your email? Default is the email from your git config.
  default: "{{ get_author_email_from_git() }}"

python_version:
  type: str
  help: What version of Python do you want to use?
  default: "3.12"

use_uv:
  type: bool
  help: Use uv for managing dependencies?
  default: true

use_precommit:
  type: bool
  help: Use pre-commit?
  default: true

use_ruff:
  type: bool
  help: Use ruff?
  default: true

use_mypy:
  type: bool
  help: Use mypy?
  default: true

ci_provider:
  type: str
  choices:
    Github: "github"
    Azure: "azure"

get_newest_version_of_libraries_from_web:
  type: bool
  help: Get the newest version of libraries from the web? Will perform a simple request to determine the latest version of the libraries.
  default: true

should_freeze_dependencies:
  type: bool
  help: |
    Freeze dependencies?
    If true, will set the dependencies versions with '==' to the latest version of the library.
    If false, will set the dependencies versions with '>=' to the latest version of the library.
  default: false

required_dependencies_version:
  type: json
  help: What versions should be used for below dependencies?
  default: |
    {% set deps_with_versions = {"mdformat": "0.7.18"} %}
    {% if use_precommit %}
    {% set _ = deps_with_versions.update({"pre-commit": "5.0.0"}) %}
    {% endif %}
    {% if use_ruff %}
    {% set _ = deps_with_versions.update({"ruff": "0.7.3"}) %}
    {% endif %}
    {% if use_mypy %}
    {% set _ = deps_with_versions.update({"mypy": "1.13.0"}) %}
    {% endif %}

    {{ deps_with_versions | tojson }}

should_ask_for_dependencies:
  type: bool
  help: Should we ask for the dependencies?
  default: false

app_dependencies:
  type: json
  multiline: true
  help: What app dependencies do you need?
  default: "{}"
  when: "{{ should_ask_for_dependencies }}"

dev_dependencies:
  type: json
  multiline: true
  help: Add additional development dependencies.
  when: "{{ should_ask_for_dependencies }}"
  default: |
    {% set dev_dependencies = [
      "pytest",
      "pytest-cov",
      "pytest-pretty",
      "pytest-randomly",
      "pytest-xdist"
    ] %}
    {% if use_mypy %}
    {% set _ = dev_dependencies.append("mypy") %}
    {% endif %}
    {% if use_ruff %}
    {% set _ = dev_dependencies.append("ruff") %}
    {% endif %}
    {% if use_precommit %}
    {% set _ = dev_dependencies.append("pre-commit") %}
    {% endif %}
    {% set dev_dependencies = dev_dependencies | unique | sort %}
    {{ dev_dependencies | tojson }}

